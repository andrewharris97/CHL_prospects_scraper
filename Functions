#######################################################
#           Elite Prospects Python Scraper            #
#######################################################

####### Dependancies
# OS, BeautifulSoup, Requests

import requests
import os
from bs4 import BeautifulSoup
import pandas as pd
import numpy as np

# Sets up a link for scrapping - used throughout project 
def link_scraper(link):
    source = requests.get(link)
    return BeautifulSoup(source.text, "html.parser")

###### Used to retrieve the correct link based on season and league
def link_builder(league, season):
    link = 'https://www.eliteprospects.com/league/%s/stats/%s'%(league, season)
    return link


### Used to switch pages within a league's season
def page_retriever(link):
    links = [link]
    more = True
    while more == True:
        more = False
        soup = link_scraper(link)
        hyper = soup.find("div", class_="table-pagination").find_all("a")
        for a in hyper:
            if a.get_text() == "Next page":
                link = a["href"]
                links.append(link)
                more = True
    return links
#Also redundant throughout project. I don't know how to do Kwargs yet hence replace.
def text(row, tag, classes, replace):
    if replace == "replace":
        return row.find(tag, class_=classes).get_text().replace("\n", "")
    else:
        return row.find(tag, class_=classes).get_text().strip()
        
        
#############################################################################################################################
# EP puts birthdate, height, and NHL information on a seperate page. This function is intended to access each player's
# hyperlink, extract the relevant data, and add that data to a corresponding vector. Note that some rows on EP are "nameless"
# based on player trades through the year. Trying to scrape a non-existent data-cell results in an AttributeError, so exceptions 
# are used to bypass if applicable.
#############################################################################################################################  
def height_and_chel(row):
    link = row.find("a")
    link = link['href']
    sou_p = link_scraper(link)
    classes = sou_p.find("div", class_="ep-container mt-4")
    height = classes.find("div", class_="order-6 order-sm-3 ep-list__item ep-list__item--col-2 ep-list__item--in-card-body ep-list__item--is-compact")
    height = height.find("div", class_="col-xs-12 col-18 text-right p-0 ep-text-color--black").get_text().strip()
    age = classes.find("div", class_ = "order-0 order-sm-0 ep-list__item ep-list__item--col-2 ep-list__item--in-card-body ep-list__item--is-compact")
    age = age.find("div", class_ = "col-xs-12 col-17 text-right p-0 ep-text-color--black").get_text().strip()
    try:
        league_stats = classes.find("div", {"id": "league-stats"})
        rows = league_stats.find_all("tr")
        nhl_data = []
        games_played = 0
        goals = 0
        assists = 0
        total_points = 0
        for row in rows:
            try: 
                if text(row, "td", "league", "strip") == "NHL":
                    games_played += int(float(text(row, "td", "regular gp", "strip")))
                    goals += int(float(text(row, "td", "regular g", "strip")))
                    assists += int(float(text(row, "td", "regular a", "strip")))
                    total_points += int(float(text(row, "td", "regular tp", "strip")))
                else:
                    pass
            except (AttributeError, ValueError):
                pass
        nhl_data.extend([age, height, games_played, goals, assists, total_points])
        return nhl_data
    except AttributeError:
        return [age, height, "", "", "", ""]


#####################################################################################################
# This is the main portion of the scraper. It takes a league and a season, and scrapes the data for 
# height, age, games played, goals, assists, points per game, and NHL totals.
#####################################################################################################

def scrape(league, year):
    season = {}
    players = []
    teams = []
    games_played =[]
    goals = []
    assists = []
    points = []
    ppg = []
    height = []
    age = []
    nhl_gp = []
    nhl_goals = []
    nhl_assists = []
    nhl_tp = []
    link = link_builder(league, year)
    pages = page_retriever(link)
    for i in pages:
        soup = link_scraper(i)
        table = soup.find("div", {"id": "skater-stats"})
        rows = table.find_all("tr", class_= None)
        for row in rows[1:]:
            try:
                player = text(row, "td", "player", "replace")
                if player =="\xa0":
                    pass
                else:
                    players.append(player)
                    team = text(row, "td", "team", "strip")
                    teams.append(team)
                    gp = text(row, "td", "gp", "strip")
                    games_played.append(gp)
                    g = text(row, "td", "g", "strip")
                    goals.append(g)
                    a = text(row, "td", "a", "strip")
                    assists.append(a)
                    p = text(row, "td", "tp sorted", "strip")
                    points.append(p )
                    pointspergame = text(row, "td", "ppg", "strip")
                    ppg.append(pointspergame)
                    nhl_data = height_and_chel(row)
                    age.append(nhl_data[0])
                    height.append(nhl_data[1])
                    nhl_gp.append(nhl_data[2])
                    nhl_goals.append(nhl_data[3])
                    nhl_assists.append(nhl_data[4])
                    nhl_tp.append(nhl_data[5])          
            except AttributeError:
                team = text(row, "td", "team", "strip")
                teams.append(team)
                gp = text(row, "td", "gp", "strip")
                games_played.append(gp)
                g = text(row, "td", "g", "strip")
                goals.append(g)
                a = text(row, "td", "a", "strip")
                assists.append(a)
                p = text(row, "td", "tp sorted", "strip")
                points.append(p)
                height.append("")
                age.append("")
                nhl_gp.append("")
                nhl_goals.append("")
                nhl_assists.append("")
                nhl_tp.append("")
                pointspergame = text(row, "td", "ppg", "strip")
                ppg.append(pointspergame)
                players.append("")
    season = {"player": players, "teams": teams, "games_played": games_played, "goals":goals, "assists":assists, "points":points, "ppg": ppg, "age": age, "height":height, "nhl_gp":nhl_gp,"nhl_goals":nhl_goals,
         "nhl_assists":nhl_assists,"nhl_tp":nhl_tp, "league": league, "season": year}
    return season
    
#####################################################
# 
# An extra few functions for Pandas manipulation
#
#####################################################

def df_converter(league_dict):
    return pd.DataFrame.from_dict(league_dict)
